c
params.require(:id).to_i
params.require(:id)
params.require(:id).permit(:id)
params.permit(:id).require(:id)
params.permit(:id)
params
c
params
c
params
c
params[:id]
params
c
Event.all(:conditions => ["starts_at >= ? AND ends_at <= ?", params[:start], params[:end]])c
Event.all(:conditions => ["starts_at >= ? AND ends_at <= ?", params[:start], params[:end]])
Event.all(conditions: ["starts_at >= ? AND ends_at <= ?", params[:start], params[:end]])
Event.all(conditions: ["starts_at >= ? AND ends_at <= ?", params[:start], params[:end])
Event.where(starts_at: > params[:start], ends_at: < params[:ends])
Event.where(starts_at: > params[:start], ends_at: > params[:ends])
params
c
object.starts_at.iso8601
object.starts_at.utc
object.starts_at.format('iso8601')
object.starts_at
c
params
c
errors[key].each do |message| puts message end
errors[key].each do |message| { puts message }
errors[key].each do |message|
errors[key]
c
errors[error].each do |message|c
errors[error].each do |message|
errors[error]
errors[:asd].present?
errors[error].present?
errors[error].count
errors[error]
error.to_s
error
c
errors.keys
error
c
errors[:title][1]
errors[:title][0]
errors[:title]
errors[0]
errors.any?
errors.count
errors
c
event.errors.as_json
event.errors.messages.inspect
event.errors.messages.inspec
event.errors.messages.methods
event.errors.messages.as_json
event.errors.messages.to_json
event.errors.messages
c
event.errors.messages
event.messages
event.errors
event.valid?
event.title = ''
event.valid?
event = Event.new(event_params)
event_params
c
params[:event]
event = Event.new(params[:event])
params[:event]
params
c
request.format
request
format
params[:format]
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params[:end]
params[:end[
params[:start]
params
